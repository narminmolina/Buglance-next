@function _is-size($value) {
  @return _is-length($value) or _contains('fill' 'fit-content' 'min-content' 'max-content', $value);
}

@function _scale($value, $iteration, $scale-ratio, $direction) {
  $result: $value;
  @for $i from 0 to $iteration {
    @if $direction {
      $result: $result * $scale-ratio;
    } @else {
      $result: $result / $scale-ratio;
    }
  }
  @return round($result);
}

@function mapDeepGet($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

@function mapDeepSet($map, $keys... /*, $value */) {
  $map-list: ($map);
  $result: null;

  @if length($keys) == 2 {
    @return map-merge(
      $map,
      (
        nth($keys, 1): nth($keys, -1),
      )
    );
  }

  @for $i from 1 through length($keys) - 2 {
    $map-list: append($map-list, map-get(nth($map-list, -1), nth($keys, $i)));
  }

  @for $i from length($map-list) through 1 {
    $result: map-merge(
      nth($map-list, $i),
      (
        nth($keys, $i): if($i == length($map-list), nth($keys, -1), $result),
      )
    );
  }

  @return $result;
}

@function listReverse($list, $recursive: false) {
  $result: ();

  @for $i from length($list) * -1 through -1 {
    @if type-of(nth($list, abs($i))) == list and $recursive {
      $result: append($result, reverse(nth($list, abs($i)), $recursive));
    } @else {
      $result: append($result, nth($list, abs($i)));
    }
  }

  @return $result;
}
