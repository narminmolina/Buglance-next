@mixin responsiveSizes($prop, $smallValue, $largeValue) {
  @media (min-width: 480px) {
    #{$prop}: $smallValue;
  }
  @media (max-width: 479.98px) {
    #{$prop}: $largeValue;
  }
}

//  Mixin for loading fonts.
//  Credits: Bourbon.
@mixin font-face($font-family, $file-path, $weight: normal, $style: normal, $asset-pipeline: false) {
  @font-face {
    font-family: $font-family;
    font-weight: $weight;
    font-style: $style;
    @if $asset-pipeline==true {
      src: local('#{$font-family}'), url('#{$file-path}.woff') format('woff'), url('#{$file-path}.woff2') format('woff2');
    } @else {
      src: local('#{$font-family}'), url('#{$file-path}.woff') format('woff'), url('#{$file-path}.woff2') format('woff2');
    }
  }
}

@mixin br-rounded($size) {
  border-radius: $size / 2;
}

//  Mixin to customize scrollbars. [Beware, this does not work in all browsers.]
//  Credits: Hugo Giraudel.
@mixin scrollbars($size, $foreground-color, $background-color: mix($foreground-color, white, 50%)) {
  //  For Webkit
  ::-webkit-scrollbar {
    width: $size;
    height: $size;
  }

  ::-webkit-scrollbar-thumb {
    background-color: $foreground-color;
  }

  ::-webkit-scrollbar-track {
    background-color: $background-color;
  }

  //  For Internet Explorer
  body {
    scrollbar-face-color: $foreground-color;
    scrollbar-track-color: $background-color;
  }
}

// Hide scrollbar

@mixin hide-scrollbar {
  -ms-overflow-style: none; //  IE and Edge
  scrollbar-width: none; //  Firefox
  &::-webkit-scrollbar,
  &::-webkit-scrollbar-thumb,
  &::-webkit-scrollbar-track {
    //  Chrome
    display: none;
  }
}

//  $direction: up, down, left, right...
@mixin triangle($direction, $size: 6px, $color: #222) {
  content: '';
  display: block;
  position: absolute;
  height: 0;
  width: 0;
  @if ($direction== 'up') {
    border-bottom: $size solid $color;
    border-left: 1/2 * $size solid transparent;
    border-right: 1/2 * $size solid transparent;
  } @else if ($direction== 'down') {
    border-top: $size solid $color;
    border-left: 1/2 * $size solid transparent;
    border-right: 1/2 * $size solid transparent;
  } @else if ($direction== 'left') {
    border-top: 1/2 * $size solid transparent;
    border-bottom: 1/2 * $size solid transparent;
    border-right: $size solid $color;
  } @else if ($direction== 'right') {
    border-top: 1/2 * $size solid transparent;
    border-bottom: 1/2 * $size solid transparent;
    border-left: $size solid $color;
  }
}

//  Mixin for the Pseudo elements ::before, ::after...
@mixin pseudo($content: '', $display: block, $pos: absolute) {
  content: $content;
  display: $display;
  position: $pos;
}

//  Centering elements vertically, horizontally, or for both positions...
@mixin centering($position) {
  position: absolute;
  @if $position== 'vertical' {
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  } @else if $position== 'horizontal' {
    left: 50%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translate(-50%);
  } @else if $position== 'both' {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  }
}

//  Remove text-shadow in selection highlight:
//  https://twitter.com/miketaylr/status/12228805301
//
//  Vendor-prefixed and regular ::selection selectors cannot be combined:
//  https://stackoverflow.com/a/16982510/7133471
//
//  Customize the background color to match your design.
//  Mixin for generating ::selection rules for selected text.
@mixin selection {
  ::selection {
    @content;
    text-shadow: none;
  }
  ::-moz-selection {
    @content;
    text-shadow: none;
  }
}

//  Mixin for styling placeholders in HTML5 form elements.
@mixin placeholder {
  ::placeholder {
    @content;
  }
  :-moz-placeholder {
    @content;
  }
  ::-moz-placeholder {
    @content;
  }
  :-ms-input-placeholder {
    @content;
  }
  ::-webkit-input-placeholder {
    @content;
  }
}

//  Resetting text styles...
@mixin reset-text {
  font-family: $font-medium, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
  font-weight: $fw-400;
  font-style: normal;
  //
  text-align: left;
  text-align: start;
  text-decoration: none;
  text-shadow: none;
  text-transform: none;
  //
  line-height: 1.5;
  letter-spacing: normal;
  line-break: auto;
  //
  word-break: normal;
  word-spacing: normal;
  white-space: normal;
}

//  Hide only visually, but have it available for screen readers:
//  https://snook.ca/archives/html_and_css/hiding-content-for-accessibility//
//  1. For long content, line feeds are not interpreted as spaces and small width
//    causes content to wrap 1 word per line:
//    https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe
//
//  Only display content to screen readers...
@mixin sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  clip-path: inset(50%);
  border: 0;
}

@mixin bg-img($size: cover, $position: center) {
  background-size: $size;
  background-repeat: no-repeat;
  background-position: $position;
}

@mixin flex-centered {
  display: flex;
  align-items: center;
  justify-content: center;
}

//  Truncate text...
@mixin truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin ellipsis($width: 100%, $display: inline-block) {
  display: $display;
  max-width: $width;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
}

@mixin size($width, $height: $width) {
  @if _is-size($height) {
    height: $height;
  } @else {
    @error "`#{$height}` is not a valid length for the `$height` argument " +
      "in the `size` mixin.";
  }

  @if _is-size($width) {
    width: $width;
  } @else {
    @error "`#{$width}` is not a valid length for the `$width` argument " +
      "in the `size` mixin.";
  }
}

@mixin focus {
  outline: none;
  box-shadow: $box-shadow-base;
}

@mixin text-overflow($font-size, $line-height, $line-clamp, $max-width) {
  display: block;
  display: -webkit-box;
  overflow: hidden;
  height: $font-size * $line-height * $line-clamp;
  max-width: $max-width;
  font-size: $font-size;
  line-height: $line-height;
  -webkit-line-clamp: $line-clamp;
  -webkit-box-orient: vertical;
  text-overflow: ellipsis;
}

//  Mixin for the element to self-clears its children.
@mixin clearfix {
  &::after {
    display: block;
    clear: both;
    content: '';
  }
}

@mixin hover-focus-effect {
  outline: none;
  border: solid 1px $c-0094f1 !important;
  box-shadow: $box-shadow-base !important;
}

@mixin on-circle($item-count, $circle-size, $item-size) {
  position: relative;
  width: $circle-size;
  height: $circle-size;
  padding: 0;
  border-radius: 50%;
  list-style: none;
  > li {
    display: block;
    position: absolute;
    top: 50%;
    left: 50%;
    width: $item-size;
    height: $item-size;
    margin: -($item-size / 2);
    $angle: (360 / $item-count);
    $rot: 0;
    @for $i from 1 through $item-count {
      &:nth-of-type(#{$i}) {
        transform: rotate($rot * 1deg) translate($circle-size / 2) rotate($rot * -1deg);
      }
      $rot: $rot + $angle;
    }
  }
}

@mixin mobile {
  @media (max-width: 480px) {
    @content;
  }
}

@mixin tablet {
  @media (max-width: 992px) {
    @content;
  }
}
